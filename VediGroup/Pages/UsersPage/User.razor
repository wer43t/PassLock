@page "/users"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IJSRuntime JS


<div class="divFlex">
    <div>
        <button class="btn btn-primary" @onclick=@(NewUser)>
            Добавить
        </button>
    </div>
    <div class="@PasswordsDeleteVisibility">
        <div class="ms-auto">
            <button type="button" @onclick="@(ShowDeleteModal)" class="btn btn-secondary">
                <span class="flex-row">
                    <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                    Удалить
                </span>
            </button>
        </div>
    </div>
</div>

<div class="card m-3 table-briefs border-0">
    <div class="card-body m-2">
        <table class="usersTable">
            <thead>
                <tr>
                    <th></th>
                    <th>ЛОГИН</th>
                    <th>ПАРОЛЕЙ</th>
                    <th>РОЛЬ</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {

                    <tr>
                        @if(user != DataAccess.CurrentUser)
                        {
                            <td><input type="checkbox" @onclick="@(() => AddToRemoveList(user))"> </td>

                        }
                        else
                        {
                            <td></td>
                        }
                        <td class="loginCell">
                            <div class="avatar">
                                <img src="https://e7.pngegg.com/pngimages/178/595/png-clipart-user-profile-computer-icons-login-user-avatars-monochrome-black.png" width="30" height="30" alt="@user.login avatar">
                            </div>
                            <div class="loginText">
                                <span class="loginTextEmail">
                                    @user.login
                                </span>
                            </div>
                        </td>
                        <td>
                            @user.Logins.Count()
                        </td>
                        <td>
                            @user.Role.name
                        </td>
                        <td>
                            @if (user != DataAccess.CurrentUser)
                            {                                
                                <div class="dropdown">
                                    <span class="center">
                                        <button @onclick="@(() => ShowDropDown(user.id))" class="dropbtn">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" focusable="false" role="img" class="ui-components-1g8715w"><path d="M14 12a2 2 0 0 1-.1.627l1.493 1.493a4 4 0 1 0-1.45 1.378l-1.54-1.539A2 2 0 1 1 14 12Z"></path><path fill-rule="evenodd" clip-rule="evenodd" d="m10.103 2-.807 3.058c-.09.037-.18.075-.27.116l-2.77-1.572-2.654 2.654L5.153 8.99a7.854 7.854 0 0 0-.135.32L2 10.13v3.788l3.051.806c.038.094.078.187.119.277l-1.568 2.765 2.654 2.654 2.734-1.55c.106.047.213.093.321.136L10.133 22h3.784l.805-3.022a7.39 7.39 0 0 0 .291-.119l2.754 1.562 2.654-2.654-1.558-2.747c.043-.1.083-.202.122-.304L22 13.89v-3.785l-3.039-.808a6.038 6.038 0 0 0-.118-.258l1.578-2.782-2.654-2.654L15.02 5.16c-.1-.043-.2-.083-.302-.121L13.89 2h-3.788ZM8.455 7.148c.05.029.102.053.155.072a1 1 0 0 0 .87-.04 5.85 5.85 0 0 1 .961-.414l.517-.169L11.644 4h.718l.713 2.617.535.158c.348.103.686.238 1.01.404a1 1 0 0 0 1.067-.098l1.742-.988.501.5-1.055 1.862.009.005a.998.998 0 0 0-.112.853l.066.203.043.08c.177.328.273.532.376.846l.168.515 2.575.685v.722l-2.595.712-.157.533a5.845 5.845 0 0 1-.404 1.01 1 1 0 0 0 .098 1.068l.988 1.743-.5.5-1.697-.962a1 1 0 0 0-1.12-.132c-.324.17-.662.308-1.01.414l-.533.162L12.38 20h-.721l-.529-1.928a1 1 0 0 0-.87-.847 5.852 5.852 0 0 1-.837-.37 1 1 0 0 0-1.088.088l-1.741.987-.501-.5.963-1.699a.996.996 0 0 0 .245-.655v-.284l-.114-.218a5.497 5.497 0 0 1-.414-.972l-.162-.534L4 12.379v-.718l2.078-.565-.014-.053a1 1 0 0 0 .737-.79 5.85 5.85 0 0 1 .368-.83 1 1 0 0 0-.091-1.092l-.985-1.736.5-.5 1.862 1.054Z"></path>
                                            </svg>
                                        </button>
                                    </span>
                                    <div id="myDropdown @user.id" class="dropdown-content">
                                        <button @onclick="@(() => DeleteOneModal(user))">Удалить</button>
    @*                                    <button @onclick="@(() => CopyUsername(login.username))">Скопировать пользователя</button>
                                        <button @onclick="@(() => CopyUsername(login.password))">Скопировать пароль</button>
                                        <button @onclick="@(() => OpenInNewTab(login.website))">Открыть сайт</button>*@
                                    </div>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public List<Core.DataBase.User> Users = DataAccess.GetUsers();

    public List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();

    private string CountForDelete;

    private bool state = true;

    private string PasswordsDeleteVisibility => state ? "passwords-delete" : "passwords-delete visible";

    private void ChangeVisibility()
    {
        state = !state;
    }


    private async Task ShowDropDown(int id)
    {
        await JS.InvokeVoidAsync("showDropDown", id);
    }

    private void AddToRemoveList(Core.DataBase.User user)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        if (UsersForDelete.Contains(user))
            UsersForDelete.Remove(user);
        else
            UsersForDelete.Add(user);
        if (UsersForDelete.Count() != 0)
        {
            state = false;
            CountForDelete = "Выбрано " + UsersForDelete.Count() + " пользователей";
        }
        else
        {
            state = true;
        }
    }

    private void DeleteOneModal(Core.DataBase.User user)
    {
        List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();
        UsersForDelete.Add(user);

        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(UsersPage.UsersDeleteModal.Users), UsersForDelete);
        if (UsersForDelete.Count == 1)
        {
            ModalService.Show<UsersPage.UsersDeleteModal>($"Удалить пользователя?", parameters, options);
        }
    }

    public void ShowDeleteModal()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(UsersPage.UsersDeleteModal.Users), UsersForDelete);
        if (UsersForDelete.Count == 1)
        {
            ModalService.Show<UsersPage.UsersDeleteModal>($"Удалить пользователя?", parameters, options);
        }
        else
        {
            ModalService.Show<UsersPage.UsersDeleteModal>($"Удалить {UsersForDelete.Count()} пользователей?", parameters, options);
        }
    }

    private void NewUser()
    {
        
    }


}
