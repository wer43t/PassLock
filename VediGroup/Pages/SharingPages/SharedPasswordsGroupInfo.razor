@page "/sharedGroups/{stringId}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IJSRuntime JS
@inject IClipboardService ClipboardService

<h3>@Group.name</h3>

@*<div class="divFlex">
    <div>
        <button class="btn btn-primary" @onclick=@(AddUserModal)>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path>
                <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"></path>
            </svg>
            Добавить
        </button>
    </div>
    <div class="@PasswordsDeleteVisibility">
        <div class="ms-auto">
            <button type="button" @onclick="@(ShowDeleteModal)" class="btn btn-secondary">
                <span class="flex-row">
                    <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                    Удалить
                </span>
            </button>
        </div>
    </div>
</div>*@ 


<div class="tab">
    <button class="tablinks" id="passwords-button" @onclick="@(() => OpenTab("passwords", "passwords-button"))">Пароли</button>
    <button class="tablinks" id="users-button" @onclick="@(() => OpenTab("users", "users-button"))">Пользователи</button>
</div>


<div class="tabcontent" id="passwords" style="display: block">
    <div class="divFlex">
        <div>
            <button class="btn btn-primary" @onclick=@(NewLoginClick)>
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"></path>
                </svg>
                Добавить
            </button>
        </div>
        <div class="@PasswordsDeleteVisibility">
            <span>@CountForDelete</span>
            <div class="ms-auto">
                <button type="button" @onclick="@(ShowDeleteModal)" class="btn btn-secondary">
                    <span class="flex-row">

                        <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                        Удалить
                    </span>
                </button>
            </div>
        </div>
    </div>


    <div class="card m-3 table-briefs border-0">
        <div class="card-body m-2">
            <table class="tours-table">
                <thead>
                    <tr>
                        <th></th>
                        <th>ITEM NAME</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var login in GroupPasswordShareds)
                    {

                        <tr>
                            <td><input type="checkbox" @onclick="@(() => AddToRemoveList(login.Login))"> </td>
                            <td @onclick="@(() => OnRowClick(login.Login))" width="500px">@login.Login.website</td>
                            <td>
                                <div class="dropdown">
                                    <button @onclick="@(() => ShowDropDown(login.id))" class="dropbtn">...</button>
                                    <div id="myDropdown @login.id" class="dropdown-content">
                                        <button @onclick="@(() => OnRowClick(login.Login))">Подробнее</button>
                                        <button @onclick="@(() => CopyUsername(login.Login.username))">Скопировать пользователя</button>
                                        <button @onclick="@(() => CopyUsername(login.Login.password))">Скопировать пароль</button>
                                        <button @onclick="@(() => OpenInNewTab(login.Login.website))">Открыть сайт</button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="tabcontent" id="users">
    <div class="card m-3 table-briefs border-0">
        <div class="card-body m-2">
            <table class="usersTable">
                <thead>
                    <tr>
                        <th>ЛОГИН</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td class="loginCell">
                                <div class="avatar">
                                    <img src="https://e7.pngegg.com/pngimages/178/595/png-clipart-user-profile-computer-icons-login-user-avatars-monochrome-black.png" width="30" height="30" alt="@user.login avatar">
                                </div>
                                <div class="loginText">
                                    <span class="loginTextEmail">
                                        @user.login
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? stringId { get; set; }
    public int Id;
    public Group Group { get; set; }
    public List<User> Users = new List<User>();
    public List<Login> LoginsList { get; set; }
    public List<GroupPasswordShared> GroupPasswordShareds { get; set; }

    protected override void OnInitialized()
    {
        int.TryParse(stringId, out Id);
        if (Id != 0)
        {
            Group = DataAccess.GetGroup(Id);
            LoginsList = Group.GroupPasswordShareds.Select(x => x.Login).ToList();
            GroupPasswordShareds = Group.GroupPasswordShareds.ToList();
        }

        foreach (var user in Group.GroupUsers)
        {
            Users.Add(user.User);
        }
    }


    public List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();

    private string CountForDelete;

    private bool state = true;

    private string PasswordsDeleteVisibility => state ? "passwords-delete" : "passwords-delete visible";

    private void ChangeVisibility()
    {
        state = !state;
    }

    private async Task OpenTab(string id, string idButton){
        await JS.InvokeVoidAsync("openTab", id, idButton);
    }

    //private async Task ShowDropDown(int id)
    //{
    //    await JS.InvokeVoidAsync("showDropDown", id);
    //}

    private void AddToRemoveList(Core.DataBase.User user)
    {
        //var options = new ModalOptions()
        //    {
        //        Size = ModalSize.Medium
        //    };
        //if (UsersForDelete.Contains(user))
        //    UsersForDelete.Remove(user);
        //else
        //    UsersForDelete.Add(user);
        //if (UsersForDelete.Count() != 0)
        //{
        //    state = false;
        //    CountForDelete = "Выбрано " + UsersForDelete.Count() + " пользователей";
        //}
        //else
        //{
        //    state = true;
        //}
    }

    private void DeleteOneModal(Core.DataBase.User user)
    {
        //List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();
        //UsersForDelete.Add(user);

        //var options = new ModalOptions()
        //    {
        //        Size = ModalSize.Medium
        //    };
        //var parameters = new ModalParameters()
        //.Add(nameof(DeleteUserFromGroupModal.Users), UsersForDelete);
        //parameters.Add(nameof(DeleteUserFromGroupModal.Group), Group);
        //if (UsersForDelete.Count == 1)
        //{
        //    ModalService.Show<DeleteUserFromGroupModal>($"Удалить пользователя?", parameters, options);
        //}
    }

    //public void ShowDeleteModal()
    //{
    //    //var options = new ModalOptions()
    //    //    {
    //    //        Size = ModalSize.Medium
    //    //    };
    //    //var parameters = new ModalParameters()
    //    //.Add(nameof(DeleteUserFromGroupModal.Users), UsersForDelete);
    //    //parameters.Add(nameof(DeleteUserFromGroupModal.Group), Group);
    //    //if (UsersForDelete.Count == 1)
    //    //{
    //    //    ModalService.Show<DeleteUserFromGroupModal>($"Удалить пользователя?", parameters, options);
    //    //}
    //    //else
    //    //{
    //    //    ModalService.Show<DeleteUserFromGroupModal>($"Удалить {UsersForDelete.Count()} пользователей?", parameters, options);
    //    //}
    //}

    private void AddUserModal()
    {
        //var options = new ModalOptions()
        //    {
        //        Size = ModalSize.Medium
        //    };
        //var parameters = new ModalParameters()
        //.Add(nameof(AddUserToGroupModal.AddedUsers), Users);
        //parameters.Add(nameof(AddUserToGroupModal.Group), Group);
        //ModalService.Show<AddUserToGroupModal>($"Добавление пользователя", parameters, options);
    }

    private void EditUserModal(Core.DataBase.User user)
    {
        //var options = new ModalOptions()
        //    {
        //        Size = ModalSize.Medium
        //    };
        //var parameters = new ModalParameters()
        //.Add(nameof(UsersPage.UserAddModal.User), user);
        //parameters.Add(nameof(UsersPage.UserAddModal.isNew), false);
        //ModalService.Show<UsersPage.UserAddModal>($"Редактирование пользователя", parameters, options);
    }




    public List<Login> LoginsForDelete = new List<Login>();


    public void NewLoginClick()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(AddSharedPassword.Group), Group);
        parameters.Add(nameof(AddSharedPassword.AddedPasswords), LoginsList);
        ModalService.Show<AddSharedPassword>("Добавить новые данные", parameters, options);
    }

    public void OnRowClick(Login login)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(Password.AddPasswordModal.Login), login);
        ModalService.Show<Password.AddPasswordModal>(login.item_name.ToString(), parameters, options);
    }

    private async Task ShowDropDown(int id)
    {
        await JS.InvokeVoidAsync("showDropDown", id);
    }

    private async Task CopyUsername(string Text)
    {
        await ClipboardService.CopyToClipboard(Text);
    }

    private void AddToRemoveList(Login login)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        if (LoginsForDelete.Contains(login))
            LoginsForDelete.Remove(login);
        else
            LoginsForDelete.Add(login);
        if (LoginsForDelete.Count() != 0)
        {
            state = false;
            CountForDelete = "Выбрано " + LoginsForDelete.Count() + " паролей";
        }
        else
        {
            state = true;
        }
    }

    private async Task OpenInNewTab(string url)
    {
        await JS.InvokeVoidAsync("openInNewTab", url);
    }

    public void ShowDeleteModal()
    {
        List<GroupPasswordShared> shared = new List<GroupPasswordShared>();

        foreach (var login in LoginsForDelete)
        {
            shared.Add(DataAccess.GetGroupPasswordShareds().Where(x => x.Login == login && x.Group == Group).First());
        }

        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(DeleteSharingPasswordsModal.Logins), LoginsForDelete);
        parameters.Add(nameof(DeleteSharingPasswordsModal.shared), shared);
        ModalService.Show<DeleteSharingPasswordsModal>($"Удалить навсегда {LoginsForDelete.Count()} паролей?", parameters, options);
    }



}
