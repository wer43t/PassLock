@page "/groups/{stringId}"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IJSRuntime JS

<h3>@Group.name</h3>

<div class="divFlex">
    <div>
        <button class="btn btn-primary" @onclick=@(AddUserModal)>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path>
                <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"></path>
            </svg>
            Добавить
        </button>
    </div>
    <div class="@PasswordsDeleteVisibility">
        <div class="ms-auto">
            <button type="button" @onclick="@(ShowDeleteModal)" class="btn btn-secondary">
                <span class="flex-row">
                    <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                    Удалить
                </span>
            </button>
        </div>
    </div>
    <div>
        <div>
            <button type="button" @onclick="@(ShowDeleteModalGroup)" class="btn btn-secondary">
                <span class="flex-row">
                    <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                    Удалить группу
                </span>
            </button>
        </div>
    </div>
</div>


<div class="card m-3 table-briefs border-0">
    <div class="card-body m-2">
        <table class="usersTable">
            <thead>
                <tr>
                    <th></th>
                    <th>ЛОГИН</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users)
                {

                    <tr>
                        @if (user != DataAccess.CurrentUser)
                        {
                            <td><input type="checkbox" @onclick="@(() => AddToRemoveList(user))"> </td>

                        }
                        else
                        {
                            <td></td>
                        }
                        <td class="loginCell">
                            <div class="avatar">
                                <img src="https://e7.pngegg.com/pngimages/178/595/png-clipart-user-profile-computer-icons-login-user-avatars-monochrome-black.png" width="30" height="30" alt="@user.login avatar">
                            </div>
                            <div class="loginText">
                                <span class="loginTextEmail">
                                    @user.login
                                </span>
                            </div>
                        </td>
                        <td>
                            @if (user != DataAccess.CurrentUser)
                            {
                                <div class="dropdown">
                                    <span class="center">
                                        <button @onclick="@(() => DeleteOneModal(user))" class="dropbtn">
                                            <svg aria-hidden="true" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" version="1.1" class="ui-components-1mdtk1p"><path d="M6 3.5V2H14V3.5H6Z"></path><path d="M17 6.5V5H3V6.5H4V18H13L12 16.5H5.5V6.5H14.5V18H16V6.5H17Z"></path><path d="M12.5 9H11V14L12.5 13V9Z"></path><path d="M9 9H7.5V14L9 13V9Z"></path></svg>
                                        </button>
                                    </span>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string? stringId { get; set; }
    public int Id;
    public Group Group { get; set; }
    public List<User> Users = new List<User>();

    protected override void OnInitialized()
    {
        int.TryParse(stringId, out Id);
        if (Id != 0)
        {
            Group = DataAccess.GetGroup(Id);
        }

        foreach(var user in Group.GroupUsers)
        {
            Users.Add(user.User);
        }
    }


    public List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();

    private string CountForDelete;

    private bool state = true;

    private string PasswordsDeleteVisibility => state ? "passwords-delete" : "passwords-delete visible";

    private void ChangeVisibility()
    {
        state = !state;
    }


    private async Task ShowDropDown(int id)
    {
        await JS.InvokeVoidAsync("showDropDown", id);
    }

    private void AddToRemoveList(Core.DataBase.User user)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        if (UsersForDelete.Contains(user))
            UsersForDelete.Remove(user);
        else
            UsersForDelete.Add(user);
        if (UsersForDelete.Count() != 0)
        {
            state = false;
            CountForDelete = "Выбрано " + UsersForDelete.Count() + " пользователей";
        }
        else
        {
            state = true;
        }
    }

    private void DeleteOneModal(Core.DataBase.User user)
    {
        List<Core.DataBase.User> UsersForDelete = new List<Core.DataBase.User>();
        UsersForDelete.Add(user);

        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(DeleteUserFromGroupModal.Users), UsersForDelete);
        parameters.Add(nameof(DeleteUserFromGroupModal.Group), Group);
        if (UsersForDelete.Count == 1)
        {
            ModalService.Show<DeleteUserFromGroupModal>($"Удалить пользователя?", parameters, options);
        }
    }

    public void ShowDeleteModal()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(DeleteUserFromGroupModal.Users), UsersForDelete);
        parameters.Add(nameof(DeleteUserFromGroupModal.Group), Group);
        if (UsersForDelete.Count == 1)
        {
            ModalService.Show<DeleteUserFromGroupModal>($"Удалить пользователя?", parameters, options);
        }
        else
        {
            ModalService.Show<DeleteUserFromGroupModal>($"Удалить {UsersForDelete.Count()} пользователей?", parameters, options);
        }
    }

    public void ShowDeleteModalGroup()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(GroupDeleteModal.Group), Group);
        ModalService.Show<GroupDeleteModal>($"Удаление группы", parameters, options);
    }

    private void AddUserModal()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(AddUserToGroupModal.AddedUsers), Users);
        parameters.Add(nameof(AddUserToGroupModal.Group), Group);
        ModalService.Show<AddUserToGroupModal>($"Добавление пользователя", parameters, options);
    }

    private void EditUserModal(Core.DataBase.User user)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium
            };
        var parameters = new ModalParameters()
        .Add(nameof(UsersPage.UserAddModal.User), user);
        parameters.Add(nameof(UsersPage.UserAddModal.isNew), false);
        ModalService.Show<UsersPage.UserAddModal>($"Редактирование пользователя", parameters, options);
    }

}
